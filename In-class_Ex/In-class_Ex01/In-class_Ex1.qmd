---
title: "In-class_Ex1"
editor: visual
---

In this exercise, we will go through how to customize your charts using **ggplot**

# Getting Start

1.  Using `p_load()` of **pacman** package to load tidyverse on (`p_load()` is more convenient than `library()` as it can install multiple packages at one time)

```{r}
pacman::p_load(tidyverse)
```

2.  Import data

show_col_types = FALSE can conceal the summary of the table

```{r}
exam_data<- read_csv('data/Exam_data.csv', show_col_types = FALSE)
```

# Customize Charts

1.  `coord_flip()`: flip the chart
2.  `Theme_minimal()`: make the background white
3.  `panel.background`: can change background color
4.  panel.grid.major vs panel.grid.minor

```{r}
ggplot(exam_data, aes(x=RACE))+
  geom_bar()+
  coord_flip()+
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "lightblue", colour='lightblue',size = 0.5, linetype = 'solid'),
    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "black"),
    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = "white"))
```

1.  `reorder()`: `reorder(variable_to_reorder, variable_to_use_for_ordering, summary_statistic_function)`

    default is ascending order, so if we want to make it descending, we need to negate the variables first

2.  `..count..`: represents the count of observations for each group, which comes from stat='count'

3.  vjust: adjust the position of the text.(options: 1,0,-1)

4.  theme(axis.title.y=element_text(angle = 0)): this makes y label horizontal

```{r}
ggplot(exam_data, aes(x=reorder(RACE, RACE, function(x) -length(x))))+
  geom_bar()+
  ylim(0,220)+
  geom_text(stat = 'count', 
            aes(label=paste0(..count..,',',round(..count../sum(..count..)*100,1),'%')), vjust=-1)+
  xlab('Race')+
  ylab('No. of\n Pupils')+
  theme(axis.title.y=element_text(angle = 0))
```

The same graph can also be generated by `fct_infreq` package. `fct_infreq` reorder the levels of a factor based on their frequency. The **`mutate()`** function creates a new variable **`RACE`** in the **`exam_data`** data frame that is the same as the original **`RACE`** variable, but with the levels reordered based on their frequency. The new variable **`RACE`** is then returned as a modified data frame.

```{r}
exam_data %>%
  mutate(RACE = fct_infreq(RACE)) %>%
  ggplot(aes(x = RACE)) + 
  geom_bar()+
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```

1.  `geom_vline`: xintercept specifies the position of the line along the x-axis; size sets the line thickness to 1

```{r}
ggplot(data=exam_data,
       aes(x=MATHS))+
  geom_histogram(bins = 20,
                 color='black',
                 fill='light blue')+
  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),
             color='red',
             linetype='dashed',
             size=1)+
  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),
             color="grey30",
             linetype="dashed", 
             size=1)
```

1.  The **`geom_histogram()`** function is used twice in this code. The first call to **`geom_histogram()`** specifies a **`data`** argument of **`d_bg`**, which is a modified version of the original data frame **`d`** with the third column removed. This creates a histogram that overlays the original histogram, using a grey fill color and an alpha (transparency) value of 0.5.

2.  The second call to **`geom_histogram()`** does not specify a **`data`** argument, so it uses the original **`d`** data frame.

3.  The **`facet_wrap()`** function is used to split the histogram into two panels, one for each value of the **`GENDER`** variable.

4.  The **`guides(fill = FALSE)`** argument is used to remove the legend for the fill color, since it is already clear from the facetting which color corresponds to which gender.

```{r}
d <- exam_data   
d_bg <- d[, -3]  

ggplot(d, aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = d_bg, fill = "grey", alpha = .5) +
  geom_histogram(colour = "black") +
  facet_wrap(~ GENDER) +
  guides(fill = 'none') +  
  theme_bw()
```

1.  **`coord_cartesian`** set the plot limits for x and y axis
2.  **`yintercept`** adds a horizontal line at y = 50

```{r}
ggplot(data=exam_data, 
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  geom_hline(yintercept=50,
             linetype="dashed",
             color="grey60",
             size=1) + 
  geom_vline(xintercept=50, 
             linetype="dashed",
             color="grey60",
             size=1)
```
