[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex1.html",
    "title": "Hands-on Ex1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data<- read_csv('data/Exam_data.csv')\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\necho: false can show only graph, while eval: false can show only code"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to Simon Chiu personal website. In this website, you will find my projects."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex1.html",
    "title": "In-class_Ex1",
    "section": "",
    "text": "Getting Start\n\nUsing p_load() of pacman package to load tidyverse on (p_load() is more convenient than library() as it can install multiple packages at one time)\n\n\npacman::p_load(tidyverse)\n\n\nImport data\n\nshow_col_types = FALSE can conceal the summary of the table\n\nexam_data<- read_csv('data/Exam_data.csv', show_col_types = FALSE)\n\n\n\nCustomize Charts\n\ncoord_flip(): flip the chart\nTheme_minimal(): make the background white\npanel.background: can change background color\npanel.grid.major vs panel.grid.minor\n\n\nggplot(exam_data, aes(x=RACE))+\n  geom_bar()+\n  coord_flip()+\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"lightblue\", colour='lightblue',size = 0.5, linetype = 'solid'),\n    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = \"black\"),\n    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = \"white\"))\n\n\n\n\n\nreorder(): reorder(variable_to_reorder, variable_to_use_for_ordering, summary_statistic_function)\ndefault is ascending order, so if we want to make it descending, we need to negate the variables first\n..count..: represents the count of observations for each group, which comes from stat=‘count’\nvjust: adjust the position of the text.(options: 1,0,-1)\ntheme(axis.title.y=element_text(angle = 0)): this makes y label horizontal\n\n\nggplot(exam_data, aes(x=reorder(RACE, RACE, function(x) -length(x))))+\n  geom_bar()+\n  ylim(0,220)+\n  geom_text(stat = 'count', \n            aes(label=paste0(..count..,',',round(..count../sum(..count..)*100,1),'%')), vjust=-1)+\n  xlab('Race')+\n  ylab('No. of\\n Pupils')+\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\nThe same graph can also be generated by fct_infreq package. fct_infreq reorder the levels of a factor based on their frequency. The mutate() function creates a new variable RACE in the exam_data data frame that is the same as the original RACE variable, but with the levels reordered based on their frequency. The new variable RACE is then returned as a modified data frame.\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\ngeom_vline: xintercept specifies the position of the line along the x-axis; size sets the line thickness to 1\n\n\nggplot(data=exam_data,\n       aes(x=MATHS))+\n  geom_histogram(bins = 20,\n                 color='black',\n                 fill='light blue')+\n  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),\n             color='red',\n             linetype='dashed',\n             size=1)+\n  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),\n             color=\"grey30\",\n             linetype=\"dashed\", \n             size=1)\n\n\n\n\n\nThe geom_histogram() function is used twice in this code. The first call to geom_histogram() specifies a data argument of d_bg, which is a modified version of the original data frame d with the third column removed. This creates a histogram that overlays the original histogram, using a grey fill color and an alpha (transparency) value of 0.5.\nThe second call to geom_histogram() does not specify a data argument, so it uses the original d data frame.\nThe facet_wrap() function is used to split the histogram into two panels, one for each value of the GENDER variable.\nThe guides(fill = FALSE) argument is used to remove the legend for the fill color, since it is already clear from the facetting which color corresponds to which gender.\n\n\nd <- exam_data   \nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = 'none') +  \n  theme_bw()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\ncoord_cartesian set the plot limits for x and y axis\nyintercept adds a horizontal line at y = 50\n\n\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_hline(yintercept=50,\n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1) + \n  geom_vline(xintercept=50, \n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "2. ggrepel\nUsing geom_label makes labels overlap\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm, size=0.5)+\n  geom_label(aes(label = ID))+\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))+\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nUsing geom_label_repel can avoid the overlapping problem\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm, size=0.5)+\n  geom_label_repel(aes(label = ID))+\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))+\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n3.ggthemes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nggplot(data = exam_data,\n       aes(x=MATHS))+\n  geom_histogram(bins = 20,\n                 boundary = 100, #only show maths score with max 100\n                 color = 'grey25',\n                 fill = 'grey90')+\n  theme_grey()+\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\nggthemesprovides other choices\n\nggplot(data = exam_data,\n       aes(x=MATHS))+\n  geom_histogram(bins = 20,\n                 boundary = 100, #only show maths score with max 100\n                 color = 'grey25',\n                 fill = 'grey90')+\n  ggtitle(\"Distribution of Maths scores\")+\n  theme_economist()\n\n\n\n\n\n\n4. herbthemes\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n5. patchwork\nIt is not unusual that multiple graphs are required to tell a compelling visual story. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n“+” Two-Column Layout,\n“/” Two-Row Layout,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\np1+p2\n\n\n\n\n\n(p1/p2)|p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3+inset_element(p2,\n                 left = 0.02, \n                 bottom = 0.7, \n                 right = 0.5, \n                 top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "2.ggiraph\n2.1 Tooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\n\nstackgroups = TRUE stacks dots that overlap.\nbinwidth = 1 sets the bin width for the histogram.\nmethod = \"histodot\" specifies the method used to draw the dots.\nscale_y_continuous(NULL, breaks = NULL) removes the y-axis label and tick marks.\ngirafe creates an HTML widget that displays the ggplot object p as an interactive plot.\nggobj = p specifies the ggplot object to be converted to an interactive plot.\nwidth_svg = 6 sets the width of the SVG element to 6 inches.\nheight_svg = 6*0.618 sets the height of the SVG element to 6 times the golden ratio, which is often used to create visually pleasing proportions.\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip <- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\n\n\n\n\n2.2 data_id\nthe default value of the hover css is hover_css = \"fill:orange;\".\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect. The opts_hover function is used to change the fill color of the dots when you hover your cursor over them. In this case, the fill color is set to #202020. The opts_hover_inv function is used to change the opacity of the dots that are not being hovered over. In this case, the opacity is set to 0.2.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n2.3 Combining tooltip and hover effect\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n2.4 Onclick\nThe updated code is adding a new column called “onclick” to the exam_data data frame. The sprintf function is used to generate a string that contains JavaScript code to open a new window in the user’s web browser. First %s refer to the link and second refer to exam_data$ID.\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n2.5 Coordinated multiple views\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n3. Ploty\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode"
  }
]