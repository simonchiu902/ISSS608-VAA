[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex1.html",
    "title": "Hands-on Ex1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data<- read_csv('data/Exam_data.csv')\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\necho: false can show only graph, while eval: false can show only code"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to Simon Chiu personal website. In this website, you will find my projects."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex1.html",
    "title": "In-class_Ex1",
    "section": "",
    "text": "Getting Start\n\nUsing p_load() of pacman package to load tidyverse on (p_load() is more convenient than library() as it can install multiple packages at one time)\n\n\npacman::p_load(tidyverse)\n\n\nImport data\n\nshow_col_types = FALSE can conceal the summary of the table\n\nexam_data<- read_csv('data/Exam_data.csv', show_col_types = FALSE)\n\n\n\nCustomize Charts\n\ncoord_flip(): flip the chart\nTheme_minimal(): make the background white\npanel.background: can change background color\npanel.grid.major vs panel.grid.minor\n\n\nggplot(exam_data, aes(x=RACE))+\n  geom_bar()+\n  coord_flip()+\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"lightblue\", colour='lightblue',size = 0.5, linetype = 'solid'),\n    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = \"black\"),\n    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = \"white\"))\n\n\n\n\n\nreorder(): reorder(variable_to_reorder, variable_to_use_for_ordering, summary_statistic_function)\ndefault is ascending order, so if we want to make it descending, we need to negate the variables first\n..count..: represents the count of observations for each group, which comes from stat=‘count’\nvjust: adjust the position of the text.(options: 1,0,-1)\ntheme(axis.title.y=element_text(angle = 0)): this makes y label horizontal\n\n\nggplot(exam_data, aes(x=reorder(RACE, RACE, function(x) -length(x))))+\n  geom_bar()+\n  ylim(0,220)+\n  geom_text(stat = 'count', \n            aes(label=paste0(..count..,',',round(..count../sum(..count..)*100,1),'%')), vjust=-1)+\n  xlab('Race')+\n  ylab('No. of\\n Pupils')+\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\nThe same graph can also be generated by fct_infreq package. fct_infreq reorder the levels of a factor based on their frequency. The mutate() function creates a new variable RACE in the exam_data data frame that is the same as the original RACE variable, but with the levels reordered based on their frequency. The new variable RACE is then returned as a modified data frame.\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\ngeom_vline: xintercept specifies the position of the line along the x-axis; size sets the line thickness to 1\n\n\nggplot(data=exam_data,\n       aes(x=MATHS))+\n  geom_histogram(bins = 20,\n                 color='black',\n                 fill='light blue')+\n  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),\n             color='red',\n             linetype='dashed',\n             size=1)+\n  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),\n             color=\"grey30\",\n             linetype=\"dashed\", \n             size=1)\n\n\n\n\n\nThe geom_histogram() function is used twice in this code. The first call to geom_histogram() specifies a data argument of d_bg, which is a modified version of the original data frame d with the third column removed. This creates a histogram that overlays the original histogram, using a grey fill color and an alpha (transparency) value of 0.5.\nThe second call to geom_histogram() does not specify a data argument, so it uses the original d data frame.\nThe facet_wrap() function is used to split the histogram into two panels, one for each value of the GENDER variable.\nThe guides(fill = FALSE) argument is used to remove the legend for the fill color, since it is already clear from the facetting which color corresponds to which gender.\n\n\nd <- exam_data   \nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = 'none') +  \n  theme_bw()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\ncoord_cartesian set the plot limits for x and y axis\nyintercept adds a horizontal line at y = 50\n\n\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_hline(yintercept=50,\n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1) + \n  geom_vline(xintercept=50, \n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1)"
  }
]